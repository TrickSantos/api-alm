{
  "version": 3,
  "sources": ["../../../../src/repositories/evento/evento.service.ts"],
  "sourcesContent": ["import { Injectable, Logger } from '@nestjs/common';\nimport { PrismaService } from '@prisma/prisma.service';\nimport { CreateEventoDto } from './dto/create-evento.dto';\nimport { UpdateEventoDto } from './dto/update-evento.dto';\nimport { DateTime } from 'luxon';\nimport { SchedulerRegistry } from '@nestjs/schedule';\nimport { CronJob } from 'cron';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { EventoProducerService } from './jobs/evento.producer';\n\n@Injectable()\nexport class EventoService {\n  constructor(\n    private prisma: PrismaService,\n    private eventEmitter: EventEmitter2,\n    private schedulerRegistry: SchedulerRegistry,\n    private eventoQueue: EventoProducerService,\n  ) {}\n\n  private readonly logger = new Logger(EventoService.name);\n\n  async create(evento: CreateEventoDto) {\n    const created = await this.prisma.evento.create({\n      data: {\n        nome: evento.nome,\n        descricao: evento.descricao,\n        pontos: evento.pontos,\n        inicio: evento.inicio,\n        fim: evento.fim,\n        ativo: false,\n      },\n    });\n\n    await this.eventoQueue.execute(created);\n  }\n\n  async findAll() {\n    return await this.prisma.evento.findMany({\n      include: { presentes: true },\n    });\n  }\n\n  async findOne(id: number) {\n    return await this.prisma.evento.findUniqueOrThrow({\n      where: { id },\n      include: { presentes: true },\n    });\n  }\n\n  async update(id: number, evento: UpdateEventoDto) {\n    return await this.prisma.evento.update({\n      where: { id },\n      data: {\n        nome: evento.nome,\n        descricao: evento.descricao,\n        pontos: evento.pontos,\n        inicio: evento.inicio,\n        fim: evento.fim,\n      },\n    });\n  }\n\n  async remove(id: number) {\n    await this.prisma.evento.delete({\n      where: { id },\n    });\n  }\n\n  addInicioEventoCronJob(\n    name: string,\n    cronTime: string | Date | DateTime,\n    id: number,\n  ) {\n    const job = new CronJob(\n      cronTime,\n      async () => {\n        await this.prisma.evento.update({\n          where: {\n            id,\n          },\n          data: {\n            ativo: true,\n          },\n        });\n        this.eventEmitter.emit('evento:update');\n        this.logger.log(`Evento com id: ${id} foi marcado como ativo`);\n      },\n      () => this.logger.log(`Evento com id: ${id} foi marcado como ativo`),\n      true,\n      'America/America/Sao_Paulo',\n    );\n    this.schedulerRegistry.addCronJob(name, job);\n    job.start();\n    this.logger.log(`Evento inicio adicionado para ${cronTime}`);\n  }\n\n  addFimEventoCronJob(\n    name: string,\n    cronTime: string | Date | DateTime,\n    id: number,\n  ) {\n    const job = new CronJob(\n      cronTime,\n      async () => {\n        await this.prisma.evento.update({\n          where: {\n            id,\n          },\n          data: {\n            ativo: false,\n          },\n        });\n        this.eventEmitter.emit('evento:update');\n        this.logger.log(`Evento com id: ${id} foi marcado como inativo`);\n      },\n      () => this.logger.log(`Evento com id: ${id} foi marcado como inativo`),\n      true,\n      'America/America/Sao_Paulo',\n    );\n    this.schedulerRegistry.addCronJob(name, job);\n    job.start();\n    this.logger.log(`Evento fim adicionado para ${cronTime}`);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,oBAAmC;AAMnC,kBAAwB;AAKjB,0BAAoB;AAAA,EACzB,YACU,QACA,cACA,mBACA,aACR;AAJQ;AACA;AACA;AACA;AAGO,kBAAS,IAAI,qBAAO,cAAc;AAAA;AAAA,QAE7C,OAAO,QAAyB;AACpC,UAAM,UAAU,MAAM,KAAK,OAAO,OAAO,OAAO;AAAA,MAC9C,MAAM;AAAA,QACJ,MAAM,OAAO;AAAA,QACb,WAAW,OAAO;AAAA,QAClB,QAAQ,OAAO;AAAA,QACf,QAAQ,OAAO;AAAA,QACf,KAAK,OAAO;AAAA,QACZ,OAAO;AAAA;AAAA;AAIX,UAAM,KAAK,YAAY,QAAQ;AAAA;AAAA,QAG3B,UAAU;AACd,WAAO,MAAM,KAAK,OAAO,OAAO,SAAS;AAAA,MACvC,SAAS,EAAE,WAAW;AAAA;AAAA;AAAA,QAIpB,QAAQ,IAAY;AACxB,WAAO,MAAM,KAAK,OAAO,OAAO,kBAAkB;AAAA,MAChD,OAAO,EAAE;AAAA,MACT,SAAS,EAAE,WAAW;AAAA;AAAA;AAAA,QAIpB,OAAO,IAAY,QAAyB;AAChD,WAAO,MAAM,KAAK,OAAO,OAAO,OAAO;AAAA,MACrC,OAAO,EAAE;AAAA,MACT,MAAM;AAAA,QACJ,MAAM,OAAO;AAAA,QACb,WAAW,OAAO;AAAA,QAClB,QAAQ,OAAO;AAAA,QACf,QAAQ,OAAO;AAAA,QACf,KAAK,OAAO;AAAA;AAAA;AAAA;AAAA,QAKZ,OAAO,IAAY;AACvB,UAAM,KAAK,OAAO,OAAO,OAAO;AAAA,MAC9B,OAAO,EAAE;AAAA;AAAA;AAAA,EAIb,uBACE,MACA,UACA,IACA;AACA,UAAM,MAAM,IAAI,oBACd,UACA,YAAY;AACV,YAAM,KAAK,OAAO,OAAO,OAAO;AAAA,QAC9B,OAAO;AAAA,UACL;AAAA;AAAA,QAEF,MAAM;AAAA,UACJ,OAAO;AAAA;AAAA;AAGX,WAAK,aAAa,KAAK;AACvB,WAAK,OAAO,IAAI,kBAAkB;AAAA,OAEpC,MAAM,KAAK,OAAO,IAAI,kBAAkB,8BACxC,MACA;AAEF,SAAK,kBAAkB,WAAW,MAAM;AACxC,QAAI;AACJ,SAAK,OAAO,IAAI,iCAAiC;AAAA;AAAA,EAGnD,oBACE,MACA,UACA,IACA;AACA,UAAM,MAAM,IAAI,oBACd,UACA,YAAY;AACV,YAAM,KAAK,OAAO,OAAO,OAAO;AAAA,QAC9B,OAAO;AAAA,UACL;AAAA;AAAA,QAEF,MAAM;AAAA,UACJ,OAAO;AAAA;AAAA;AAGX,WAAK,aAAa,KAAK;AACvB,WAAK,OAAO,IAAI,kBAAkB;AAAA,OAEpC,MAAM,KAAK,OAAO,IAAI,kBAAkB,gCACxC,MACA;AAEF,SAAK,kBAAkB,WAAW,MAAM;AACxC,QAAI;AACJ,SAAK,OAAO,IAAI,8BAA8B;AAAA;AAAA;AA9G3C;AAAA,EADN;AAAA,GACM;",
  "names": []
}
