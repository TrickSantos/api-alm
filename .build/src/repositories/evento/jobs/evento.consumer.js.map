{
  "version": 3,
  "sources": ["../../../../../src/repositories/evento/jobs/evento.consumer.ts"],
  "sourcesContent": ["import {\n  Processor,\n  Process,\n  OnQueueActive,\n  OnQueueCompleted,\n} from '@nestjs/bull';\nimport { Logger } from '@nestjs/common';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { evento } from '@prisma/client';\nimport { PrismaService } from '@prisma/prisma.service';\nimport { Job } from 'bull';\n\n@Processor('evento')\nexport class EventoConsumer {\n  constructor(\n    private prisma: PrismaService,\n    private eventEmitter: EventEmitter2,\n  ) {}\n\n  private readonly logger = new Logger(EventoConsumer.name);\n\n  @Process('inicio')\n  async inicio(job: Job<evento>) {\n    await this.prisma.evento.update({\n      where: {\n        id: job.data.id,\n      },\n      data: {\n        ativo: true,\n      },\n    });\n    this.eventEmitter.emit('evento:update');\n  }\n\n  @Process('fim')\n  async fim(job: Job<evento>) {\n    await this.prisma.evento.update({\n      where: {\n        id: job.data.id,\n      },\n      data: {\n        ativo: false,\n      },\n    });\n    this.eventEmitter.emit('evento:update');\n  }\n\n  @OnQueueActive()\n  onActive(job: Job<evento>) {\n    this.logger.log(\n      `Processing job ${job.id} of type ${job.name} to status ${\n        job.data.ativo ? 'ativo' : 'inativo'\n      }...`,\n    );\n  }\n\n  @OnQueueCompleted()\n  onComplete(job: Job<evento>) {\n    this.logger.log(\n      `Completed job ${job.id} of type ${job.name} to status ${\n        job.data.ativo ? 'ativo' : 'inativo'\n      }...`,\n    );\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,kBAKO;AACP,oBAAuB;AAOhB,2BAAqB;AAAA,EAC1B,YACU,QACA,cACR;AAFQ;AACA;AAGO,kBAAS,IAAI,qBAAO,eAAe;AAAA;AAAA,QAG9C,OAAO,KAAkB;AAC7B,UAAM,KAAK,OAAO,OAAO,OAAO;AAAA,MAC9B,OAAO;AAAA,QACL,IAAI,IAAI,KAAK;AAAA;AAAA,MAEf,MAAM;AAAA,QACJ,OAAO;AAAA;AAAA;AAGX,SAAK,aAAa,KAAK;AAAA;AAAA,QAInB,IAAI,KAAkB;AAC1B,UAAM,KAAK,OAAO,OAAO,OAAO;AAAA,MAC9B,OAAO;AAAA,QACL,IAAI,IAAI,KAAK;AAAA;AAAA,MAEf,MAAM;AAAA,QACJ,OAAO;AAAA;AAAA;AAGX,SAAK,aAAa,KAAK;AAAA;AAAA,EAIzB,SAAS,KAAkB;AACzB,SAAK,OAAO,IACV,kBAAkB,IAAI,cAAc,IAAI,kBACtC,IAAI,KAAK,QAAQ,UAAU;AAAA;AAAA,EAMjC,WAAW,KAAkB;AAC3B,SAAK,OAAO,IACV,iBAAiB,IAAI,cAAc,IAAI,kBACrC,IAAI,KAAK,QAAQ,UAAU;AAAA;AAAA;AAtC3B;AAAA,EADL,yBAAQ;AAAA,GACH,AATD,eASC;AAaA;AAAA,EADL,yBAAQ;AAAA,GACH,AAtBD,eAsBC;AAaN;AAAA,EADC;AAAA,GACD,AAnCK,eAmCL;AASA;AAAA,EADC;AAAA,GACD,AA5CK,eA4CL;AA5CK;AAAA,EADN,2BAAU;AAAA,GACJ;",
  "names": []
}
