{
  "version": 3,
  "sources": ["../../../../src/repositories/evento/evento.gateway.ts"],
  "sourcesContent": ["import {\n  WebSocketGateway,\n  SubscribeMessage,\n  MessageBody,\n  WebSocketServer,\n} from '@nestjs/websockets';\nimport { Server } from 'socket.io';\nimport { EventoService } from './evento.service';\nimport { CreateEventoDto } from './dto/create-evento.dto';\nimport { UpdateEventoDto } from './dto/update-evento.dto';\nimport { WsAuthGuard } from 'auth/guards/ws.guard';\nimport {\n  UseFilters,\n  UseGuards,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { WsExceptionFilter } from 'ws.filter';\nimport { OnEvent } from '@nestjs/event-emitter';\n\n@WebSocketGateway({\n  cors: '*:*',\n})\n@UseGuards(WsAuthGuard)\n@UseFilters(new WsExceptionFilter())\n@UsePipes(new ValidationPipe({ transform: true }))\nexport class EventoGateway {\n  constructor(private readonly eventoService: EventoService) {}\n\n  @WebSocketServer()\n  server: Server;\n\n  @SubscribeMessage('evento:create')\n  async create(@MessageBody() createEventoDto: CreateEventoDto) {\n    await this.eventoService.create(createEventoDto);\n    this.server.emit('evento:created');\n    return { status: 'sucess', message: ['Evento salvo com sucesso!'] };\n  }\n\n  @SubscribeMessage('evento:index')\n  findAll() {\n    return this.eventoService.findAll();\n  }\n\n  @SubscribeMessage('evento:find')\n  findOne(@MessageBody() id: number) {\n    return this.eventoService.findOne(id);\n  }\n\n  @SubscribeMessage('evento:update')\n  async update(@MessageBody() updateEventoDto: UpdateEventoDto) {\n    await this.eventoService.update(updateEventoDto.id, updateEventoDto);\n    this.server.emit('evento:updated');\n    return { status: 'sucess', message: ['Evento salvo com sucesso!'] };\n  }\n\n  @SubscribeMessage('evento:destroy')\n  async remove(@MessageBody() id: number) {\n    await this.eventoService.remove(id);\n    this.server.emit('evento:destroyed');\n  }\n\n  @OnEvent('evento:update', { async: true })\n  handle() {\n    this.server.emit('evento:updated');\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,wBAKO;AAKP,gBAA4B;AAC5B,oBAKO;AACP,iBAAkC;AAClC,2BAAwB;AAQjB,0BAAoB;AAAA,EACzB,YAA6B,eAA8B;AAA9B;AAAA;AAAA,QAMvB,OAAsB,iBAAkC;AAC5D,UAAM,KAAK,cAAc,OAAO;AAChC,SAAK,OAAO,KAAK;AACjB,WAAO,EAAE,QAAQ,UAAU,SAAS,CAAC;AAAA;AAAA,EAIvC,UAAU;AACR,WAAO,KAAK,cAAc;AAAA;AAAA,EAI5B,QAAuB,IAAY;AACjC,WAAO,KAAK,cAAc,QAAQ;AAAA;AAAA,QAI9B,OAAsB,iBAAkC;AAC5D,UAAM,KAAK,cAAc,OAAO,gBAAgB,IAAI;AACpD,SAAK,OAAO,KAAK;AACjB,WAAO,EAAE,QAAQ,UAAU,SAAS,CAAC;AAAA;AAAA,QAIjC,OAAsB,IAAY;AACtC,UAAM,KAAK,cAAc,OAAO;AAChC,SAAK,OAAO,KAAK;AAAA;AAAA,EAInB,SAAS;AACP,SAAK,OAAO,KAAK;AAAA;AAAA;AAlCnB;AAAA,EADC;AAAA,GACD,AAJK,cAIL;AAGM;AAAA,EADL,wCAAiB;AAAA,EACJ;AAAA,GAAR,AAPD,cAOC;AAON;AAAA,EADC,wCAAiB;AAAA,GAClB,AAdK,cAcL;AAKA;AAAA,EADC,wCAAiB;AAAA,EACT;AAAA,GAAT,AAnBK,cAmBL;AAKM;AAAA,EADL,wCAAiB;AAAA,EACJ;AAAA,GAAR,AAxBD,cAwBC;AAOA;AAAA,EADL,wCAAiB;AAAA,EACJ;AAAA,GAAR,AA/BD,cA+BC;AAMN;AAAA,EADC,kCAAQ,iBAAiB,EAAE,OAAO;AAAA,GACnC,AArCK,cAqCL;AArCK;AAAA,EANN,wCAAiB;AAAA,IAChB,MAAM;AAAA;AAAA,EAEP,6BAAU;AAAA,EACV,8BAAW,IAAI;AAAA,EACf,4BAAS,IAAI,6BAAe,EAAE,WAAW;AAAA,GACnC;",
  "names": []
}
