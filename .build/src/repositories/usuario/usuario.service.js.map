{
  "version": 3,
  "sources": ["../../../../src/repositories/usuario/usuario.service.ts"],
  "sourcesContent": ["import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '@prisma/prisma.service';\nimport * as bcrypt from 'bcrypt';\nimport { CreateUsuarioDto } from './dto/create-usuario.dto';\nimport { IndexUsuarioDto } from './dto/index-usuario.dto';\nimport { UpdateUsuarioDto } from './dto/update-usuario.dto';\n\n@Injectable()\nexport class UsuarioService {\n  constructor(private prisma: PrismaService) {}\n\n  private exclude<User, Key extends keyof User>(\n    user: User,\n    ...keys: Key[]\n  ): Omit<User, Key> {\n    for (const key of keys) {\n      delete user[key];\n    }\n    return user;\n  }\n\n  async create(usuario: CreateUsuarioDto) {\n    const password = await bcrypt.hash(usuario.password ?? 'senha', 12);\n    await this.prisma.usuario.create({\n      data: {\n        nome: usuario.nome,\n        email: usuario.email,\n        password,\n        clubeId: usuario.clubeId,\n        funcao: usuario.funcao,\n        ativo: usuario.ativo,\n        codigo: usuario.codigo,\n      },\n    });\n  }\n\n  async findAll(data: IndexUsuarioDto) {\n    return await this.prisma.usuario.findMany({\n      where: data,\n      select: {\n        id: true,\n        codigo: true,\n        funcao: true,\n        clube: true,\n        nome: true,\n        clubeId: true,\n        email: true,\n        presencas: true,\n        ativo: false,\n        password: false,\n      },\n    });\n  }\n\n  async findById(codigo: string) {\n    return await this.prisma.usuario.findFirst({\n      where: { codigo },\n      include: { clube: true, presencas: true },\n    });\n  }\n\n  async findOne(email: string) {\n    const user = await this.prisma.usuario.findUniqueOrThrow({\n      where: { email },\n      include: { clube: true, presencas: true },\n    });\n    return this.exclude(user, 'password');\n  }\n\n  async validateUser(email: string) {\n    return await this.prisma.usuario.findUniqueOrThrow({\n      where: { email },\n      include: { clube: true, presencas: true },\n    });\n  }\n\n  async update(id: number, usuario: UpdateUsuarioDto) {\n    const user = await this.prisma.usuario.update({\n      where: { id },\n      data: {\n        nome: usuario.nome,\n        email: usuario.email,\n        password: usuario.password,\n        clubeId: usuario.clubeId,\n        funcao: usuario.funcao,\n        ativo: usuario.ativo,\n        codigo: usuario.codigo,\n      },\n      include: { clube: true, presencas: true },\n    });\n    return this.exclude(user, 'password');\n  }\n\n  async remove(id: number) {\n    return await this.prisma.usuario.delete({\n      where: { id },\n    });\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,oBAA2B;AAE3B,aAAwB;AAMjB,2BAAqB;AAAA,EAC1B,YAAoB,QAAuB;AAAvB;AAAA;AAAA,EAEZ,QACN,SACG,MACc;AACjB,eAAW,OAAO,MAAM;AACtB,aAAO,KAAK;AAAA;AAEd,WAAO;AAAA;AAAA,QAGH,OAAO,SAA2B;AACtC,UAAM,WAAW,MAAM,OAAO,KAAK,QAAQ,YAAY,SAAS;AAChE,UAAM,KAAK,OAAO,QAAQ,OAAO;AAAA,MAC/B,MAAM;AAAA,QACJ,MAAM,QAAQ;AAAA,QACd,OAAO,QAAQ;AAAA,QACf;AAAA,QACA,SAAS,QAAQ;AAAA,QACjB,QAAQ,QAAQ;AAAA,QAChB,OAAO,QAAQ;AAAA,QACf,QAAQ,QAAQ;AAAA;AAAA;AAAA;AAAA,QAKhB,QAAQ,MAAuB;AACnC,WAAO,MAAM,KAAK,OAAO,QAAQ,SAAS;AAAA,MACxC,OAAO;AAAA,MACP,QAAQ;AAAA,QACN,IAAI;AAAA,QACJ,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,MAAM;AAAA,QACN,SAAS;AAAA,QACT,OAAO;AAAA,QACP,WAAW;AAAA,QACX,OAAO;AAAA,QACP,UAAU;AAAA;AAAA;AAAA;AAAA,QAKV,SAAS,QAAgB;AAC7B,WAAO,MAAM,KAAK,OAAO,QAAQ,UAAU;AAAA,MACzC,OAAO,EAAE;AAAA,MACT,SAAS,EAAE,OAAO,MAAM,WAAW;AAAA;AAAA;AAAA,QAIjC,QAAQ,OAAe;AAC3B,UAAM,OAAO,MAAM,KAAK,OAAO,QAAQ,kBAAkB;AAAA,MACvD,OAAO,EAAE;AAAA,MACT,SAAS,EAAE,OAAO,MAAM,WAAW;AAAA;AAErC,WAAO,KAAK,QAAQ,MAAM;AAAA;AAAA,QAGtB,aAAa,OAAe;AAChC,WAAO,MAAM,KAAK,OAAO,QAAQ,kBAAkB;AAAA,MACjD,OAAO,EAAE;AAAA,MACT,SAAS,EAAE,OAAO,MAAM,WAAW;AAAA;AAAA;AAAA,QAIjC,OAAO,IAAY,SAA2B;AAClD,UAAM,OAAO,MAAM,KAAK,OAAO,QAAQ,OAAO;AAAA,MAC5C,OAAO,EAAE;AAAA,MACT,MAAM;AAAA,QACJ,MAAM,QAAQ;AAAA,QACd,OAAO,QAAQ;AAAA,QACf,UAAU,QAAQ;AAAA,QAClB,SAAS,QAAQ;AAAA,QACjB,QAAQ,QAAQ;AAAA,QAChB,OAAO,QAAQ;AAAA,QACf,QAAQ,QAAQ;AAAA;AAAA,MAElB,SAAS,EAAE,OAAO,MAAM,WAAW;AAAA;AAErC,WAAO,KAAK,QAAQ,MAAM;AAAA;AAAA,QAGtB,OAAO,IAAY;AACvB,WAAO,MAAM,KAAK,OAAO,QAAQ,OAAO;AAAA,MACtC,OAAO,EAAE;AAAA;AAAA;AAAA;AAvFR;AAAA,EADN;AAAA,GACM;",
  "names": []
}
