{
  "version": 3,
  "sources": ["../../../../src/repositories/presenca/presenca.service.ts"],
  "sourcesContent": ["import { Injectable } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from '@prisma/prisma.service';\nimport { CreatePresencaDto } from './dto/create-presenca.dto';\n\n@Injectable()\nexport class PresencaService {\n  constructor(private prisma: PrismaService) { }\n\n  async create(presenca: CreatePresencaDto) {\n    await this.prisma.presenca.upsert({\n      where: {\n        eventoId_usuarioId_clubeId: {\n          clubeId: presenca.clubeId,\n          eventoId: presenca.eventoId,\n          usuarioId: presenca.usuarioId,\n        },\n      },\n      create: {\n        eventoId: presenca.eventoId,\n        clubeId: presenca.clubeId,\n        usuarioId: presenca.usuarioId,\n      },\n      update: {\n        eventoId: presenca.eventoId,\n        clubeId: presenca.clubeId,\n        usuarioId: presenca.usuarioId,\n      },\n    });\n  }\n\n  async findAll() {\n    return await this.prisma.presenca.findMany({\n      include: { clube: true, evento: true, usuario: true },\n    });\n  }\n\n  async getPresencasByEventId(id: number) {\n\n    const clubes = await this.prisma.clube.findMany({\n      select: {\n        nome: true,\n        logo: true,\n        id: true,\n        _count: {\n          select: {\n            presentes: {\n              where: {\n                eventoId: id,\n                usuario: {\n                  funcao: {\n                    in: ['desbravador', 'diretoria'],\n                  },\n                },\n              },\n            },\n            membros: {\n              where: {\n                funcao: {\n                  in: ['desbravador', 'diretoria'],\n                },\n              },\n            },\n          },\n        },\n      },\n    });\n\n    const res = clubes.map((clube) => {\n      const porcentagem = Math.floor(\n        (clube._count.presentes / clube._count.membros) * 100,\n      );\n\n      return {\n        id: clube.id,\n        logo: clube.logo,\n        nome: clube.nome,\n        porcentagem,\n      };\n    });\n\n    const primeiros = res.map(async clube => {\n      const ultimo = await this.prisma.$queryRaw(\n        Prisma.sql`select\n\tc.id, p.\"usuarioId\" , p.\"createdAt\" \nfrom\n\tpresenca as p\ninner join usuario as u on\n\tp.\"usuarioId\" = u.id\ninner join clube as c on\n\tp.\"clubeId\" = c.id \nwhere\n\tp.\"eventoId\" = ${id} and \n\tu.funcao in ('desbravador','diretoria') and\n\tc.id = ${clube.id}\norder by\n\tp.\"createdAt\" desc\nlimit 1`\n      );\n      return { ...clube, ultimo: ultimo[0].createdAt }\n    });\n\n    return primeiros;\n\n    //return res.sort((a, b) => b.porcentagem - a.porcentagem);\n  }\n\n  async findOne(id: number) {\n    return await this.prisma.presenca.findUniqueOrThrow({\n      where: { id },\n      include: { clube: true, evento: true, usuario: true },\n    });\n  }\n\n  async remove(id: number) {\n    await this.prisma.presenca.delete({\n      where: { id },\n    });\n  }\n\n  async verificaPorcentagem(presenca: CreatePresencaDto) {\n    const clube = await this.prisma.clube.findFirst({\n      select: {\n        nome: true,\n        logo: true,\n        id: true,\n        _count: {\n          select: {\n            presentes: {\n              where: {\n                eventoId: presenca.eventoId,\n                usuario: {\n                  funcao: {\n                    in: ['desbravador', 'diretoria'],\n                  },\n                },\n              },\n            },\n            membros: {\n              where: {\n                funcao: {\n                  in: ['desbravador', 'diretoria'],\n                },\n              },\n            },\n          },\n        },\n      },\n      where: {\n        id: presenca.clubeId,\n      },\n      orderBy: {\n        presentes: {\n          _count: 'desc',\n        },\n      },\n    });\n\n    const porcentagem = Math.floor(\n      (clube._count.presentes / clube._count.membros) * 100,\n    );\n\n    return { ...clube, porcentagem };\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
