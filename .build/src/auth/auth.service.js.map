{
  "version": 3,
  "sources": ["../../../src/auth/auth.service.ts"],
  "sourcesContent": ["import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { WsException } from '@nestjs/websockets';\nimport * as bcrypt from 'bcrypt';\nimport { UsuarioService } from 'repositories/usuario/usuario.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usuarioService: UsuarioService,\n    private jwtService: JwtService,\n  ) {}\n\n  async validate(email: string, pass: string) {\n    const user = await this.usuarioService.validateUser(email);\n\n    if (!user) throw new WsException('Usuario n\u00E3o encontrado');\n\n    const passValid = await bcrypt.compare(pass, user.password);\n\n    if (passValid) {\n      return user;\n    } else {\n      throw new WsException('Email ou Senha invalidos');\n    }\n  }\n\n  async login(email: string) {\n    console.log('login');\n    const usuario = await this.usuarioService.findOne(email);\n    return {\n      token: this.jwtService.sign(usuario),\n      usuario,\n    };\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,oBAA2B;AAE3B,wBAA4B;AAC5B,aAAwB;AAIjB,wBAAkB;AAAA,EACvB,YACU,gBACA,YACR;AAFQ;AACA;AAAA;AAAA,QAGJ,SAAS,OAAe,MAAc;AAC1C,UAAM,OAAO,MAAM,KAAK,eAAe,aAAa;AAEpD,QAAI,CAAC;AAAM,YAAM,IAAI,8BAAY;AAEjC,UAAM,YAAY,MAAM,OAAO,QAAQ,MAAM,KAAK;AAElD,QAAI,WAAW;AACb,aAAO;AAAA,WACF;AACL,YAAM,IAAI,8BAAY;AAAA;AAAA;AAAA,QAIpB,MAAM,OAAe;AACzB,YAAQ,IAAI;AACZ,UAAM,UAAU,MAAM,KAAK,eAAe,QAAQ;AAClD,WAAO;AAAA,MACL,OAAO,KAAK,WAAW,KAAK;AAAA,MAC5B;AAAA;AAAA;AAAA;AAzBC;AAAA,EADN;AAAA,GACM;",
  "names": []
}
